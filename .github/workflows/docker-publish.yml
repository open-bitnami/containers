name: '[CI/CD] Docker publish'
on:
  workflow_call:
    inputs:
      matrix:
        description: 'Stringified JSON: {"include":[ ... ]}'
        required: true
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build ${{ matrix.app }} (${{ matrix.context }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(inputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 #v3.10.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Format repo slug
        uses: actions/github-script@v8
        id: repo_slug
        env:
          REGISTRY: ${{ env.REGISTRY }}
          REPOSITORY: ${{ github.repository }}
        with:
          result-encoding: string
          script: return `${process.env.REGISTRY}/${process.env.REPOSITORY.toLowerCase()}`

      - name: Compute image with tags
        id: image_with_tags
        shell: bash
        run: |
          image_base="${{ steps.repo_slug.outputs.result }}/${{ matrix.app }}"
          mapfile -t tags < <(jq -r '.[]' <<< '${{ toJson(matrix.tags) }}')
          if [[ ${#tags[@]} -eq 0 ]]; then
            echo "::error::No tags provided by matrix for ${{ matrix.context }}"
            exit 1
          fi
          image_with_tags=$(printf "%s\n" "${tags[@]}" | awk -v base="$image_base" '{print base ":" $0}' | paste -sd, -)
          echo "image_base=$image_base" >> $GITHUB_OUTPUT
          echo "tags=$image_with_tags" >> $GITHUB_OUTPUT

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: ${{ matrix.context }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image_with_tags.outputs.tags }}
          labels: ${{ steps.image_with_tags.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.image_with_tags.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: | 
          cleaned_digest="$(printf '%s' "$DIGEST" | tr -d '[:space:]')"

          IFS=',' read -ra tag_arr <<< "$TAGS"
          for tag in "${tag_arr[@]}"; do
            cleaned_tag="${tag//[[:space:]]/}"   # strip spaces, tabs, CRLF
            [ -n "$cleaned_tag" ] || continue
            cosign sign --yes "${cleaned_tag}@${cleaned_digest}"
          done
